{"uid":"a2de76da22d9b242","name":"test_find_advisor_by_invalid_email_format","fullName":"tests.Advisor.test_find_advisor_by_email#test_find_advisor_by_invalid_email_format","historyId":"fa1d6548290aab62050c62d3422823e9","time":{"start":1726261393797,"stop":1726261395358,"duration":1561},"status":"failed","statusMessage":"AssertionError: Expected status code 400 but got 500. Error message: El asesor con ese Email no exite","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7f812c9a4180>\n\n    @allure.suite('Advisor')\n    @allure.epic('Find Advisor By Email')\n    @allure.feature('Advisor')\n    @allure.story('Find Advisor by Invalid Email Format')\n    @pytest.mark.functional\n    @pytest.mark.negative\n    @pytest.mark.regression\n    def test_find_advisor_by_invalid_email_format(get_headers):\n        invalid_email = \"invalid-email\"\n        url = f\"{AdvisorEndpoints.get_advisor_by_email(invalid_email)}\"\n        headers = Auth().auth_valid_credential(get_headers)\n        response = RealHomeRequest.get_with_url_headers(url, headers)\n    \n>       assert_status_code_bad_request(response)\n\ntests/Advisor/test_find_advisor_by_email.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\n\n    def assert_status_code_bad_request(response):\n>       assert response.status_code == 400, f\"Expected status code 400 but got {response.status_code}. Error message: {extract_error_message(response)}\"\nE       AssertionError: Expected status code 400 but got 500. Error message: El asesor con ese Email no exite\n\ncore/assertions/status_code.py:20: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_headers","time":{"start":1726261393797,"stop":1726261393797,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"suite","value":"Advisor"},{"name":"epic","value":"Find Advisor By Email"},{"name":"story","value":"Find Advisor by Invalid Email Format"},{"name":"feature","value":"Advisor"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.Advisor"},{"name":"host","value":"fv-az984-975"},{"name":"thread","value":"2071-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Advisor.test_find_advisor_by_email"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["negative","functional","regression"]},"source":"a2de76da22d9b242.json","parameterValues":[]}