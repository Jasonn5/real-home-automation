{"uid":"4f2f415587435087","name":"test_find_advisor_by_non_existent_email","fullName":"tests.Advisor.test_find_advisor_by_email#test_find_advisor_by_non_existent_email","historyId":"ddeae76732b1ee56255be46058804be9","time":{"start":1726259956118,"stop":1726259959254,"duration":3136},"status":"failed","statusMessage":"AssertionError: Expected status code 404 but got 500. Error message: El asesor con ese Email no exite","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7f46c6640d60>\n\n    @allure.suite('Advisor')\n    @allure.epic('Find Advisor By Email')\n    @allure.feature('Advisor')\n    @allure.story('Find Advisor by Non-Existent Email')\n    @pytest.mark.functional\n    @pytest.mark.negative\n    @pytest.mark.regression\n    def test_find_advisor_by_non_existent_email(get_headers):\n        non_existent_email = \"nonexistent@example.com\"\n        url = f\"{AdvisorEndpoints.get_advisor_by_email(non_existent_email)}\"\n        headers = Auth().auth_valid_credential(get_headers)\n        response = RealHomeRequest.get_with_url_headers(url, headers)\n    \n>       assert_status_code_not_found(response)\n\ntests/Advisor/test_find_advisor_by_email.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\n\n    def assert_status_code_not_found(response):\n>       assert response.status_code == 404, f\"Expected status code 404 but got {response.status_code}. Error message: {extract_error_message(response)}\"\nE       AssertionError: Expected status code 404 but got 500. Error message: El asesor con ese Email no exite\n\ncore/assertions/status_code.py:8: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_headers","time":{"start":1726259956118,"stop":1726259956118,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"epic","value":"Find Advisor By Email"},{"name":"story","value":"Find Advisor by Non-Existent Email"},{"name":"feature","value":"Advisor"},{"name":"suite","value":"Advisor"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.Advisor"},{"name":"host","value":"fv-az1766-161"},{"name":"thread","value":"2130-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Advisor.test_find_advisor_by_email"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["negative","functional","regression"]},"source":"4f2f415587435087.json","parameterValues":[]}