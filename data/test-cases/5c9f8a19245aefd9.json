{"uid":"5c9f8a19245aefd9","name":"test_get_advisor_by_non_existent_id","fullName":"tests.advisor.test_find_advisor_by_id#test_get_advisor_by_non_existent_id","historyId":"9f14c3624680cb05e2d48bd38222a541","time":{"start":1726286383860,"stop":1726286386050,"duration":2190},"status":"failed","statusMessage":"AssertionError: Expected status code 404 but got 500. Error message: El asesor con ese Id no exite","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7f5ee76aa520>\n\n    @allure.suite('Get advisor By ID')\n    @allure.epic('Advisor')\n    @allure.feature('Get advisor By ID')\n    @allure.story('Get advisor by Non-Existent ID')\n    @allure.tag('author: Jeyson')\n    @pytest.mark.functional\n    @pytest.mark.negative\n    @pytest.mark.regression\n    def test_get_advisor_by_non_existent_id(get_headers):\n        non_existent_id = 99999\n        url = f\"{AdvisorEndpoints.get_advisor_by_id(non_existent_id)}\"\n        headers = Auth().auth_valid_credential(get_headers)\n        response = RealHomeRequest.get_with_url_headers(url, headers)\n    \n>       assert_status_code_not_found(response)\n\ntests/advisor/test_find_advisor_by_id.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\n\n    def assert_status_code_not_found(response):\n>       assert response.status_code == 404, f\"Expected status code 404 but got {response.status_code}. Error message: {extract_error_message(response)}\"\nE       AssertionError: Expected status code 404 but got 500. Error message: El asesor con ese Id no exite\n\ncore/assertions/status_code.py:8: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_headers","time":{"start":1726286383860,"stop":1726286383860,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"suite","value":"Get advisor By ID"},{"name":"feature","value":"Get advisor By ID"},{"name":"tag","value":"author: Jeyson"},{"name":"story","value":"Get advisor by Non-Existent ID"},{"name":"epic","value":"Advisor"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.advisor"},{"name":"host","value":"fv-az654-931"},{"name":"thread","value":"2099-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.advisor.test_find_advisor_by_id"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["negative","functional","regression","author: Jeyson"]},"source":"5c9f8a19245aefd9.json","parameterValues":[]}