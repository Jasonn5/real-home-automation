{"uid":"2bdcce41b97bc24e","name":"test_find_advisor_without_authentication","fullName":"tests.Advisor.test_find_advisor_by_email#test_find_advisor_without_authentication","historyId":"93b2fffc3e6a9cb3d08da76aae658bdf","time":{"start":1726258169678,"stop":1726258170179,"duration":501},"status":"failed","statusMessage":"AssertionError: Expected status code 401 but got 200. Error message: No error message provided","statusTrace":"@allure.suite('Advisor')\n    @allure.epic('Find Advisor By Email')\n    @allure.feature('Advisor')\n    @allure.story('Unauthorized Access to Find Advisor')\n    @pytest.mark.functional\n    @pytest.mark.negative\n    @pytest.mark.smoke\n    def test_find_advisor_without_authentication():\n        valid_email = \"jasson.n021@gmail.com\"\n        url = f\"{AdvisorEndpoints.get_advisor_by_email(valid_email)}\"\n        response = RealHomeRequest.get_with_url(url)\n    \n>       assert_status_code_unauthorized(response)\n\ntests/Advisor/test_find_advisor_by_email.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>\n\n    def assert_status_code_unauthorized(response):\n>       assert response.status_code == 401, f\"Expected status code 401 but got {response.status_code}. Error message: {extract_error_message(response)}\"\nE       AssertionError: Expected status code 401 but got 200. Error message: No error message provided\n\ncore/assertions/status_code.py:14: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"suite","value":"Advisor"},{"name":"feature","value":"Advisor"},{"name":"story","value":"Unauthorized Access to Find Advisor"},{"name":"epic","value":"Find Advisor By Email"},{"name":"tag","value":"smoke"},{"name":"tag","value":"negative"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.Advisor"},{"name":"host","value":"fv-az1499-20"},{"name":"thread","value":"2125-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Advisor.test_find_advisor_by_email"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["negative","functional","smoke"]},"source":"2bdcce41b97bc24e.json","parameterValues":[]}