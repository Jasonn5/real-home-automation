{"uid":"4638b667899e1917","name":"test_get_advisor_by_non_existent_id","fullName":"tests.advisor.test_find_advisor_by_id#test_get_advisor_by_non_existent_id","historyId":"9f14c3624680cb05e2d48bd38222a541","time":{"start":1729992266472,"stop":1729992267910,"duration":1438},"status":"skipped","statusMessage":"XFAIL This test case is expected to fail due to known issue.\n\nAssertionError: Expected status code 404 but got 500. Error message: El asesor con ese Id no exite","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7f9b41a37ec0>\n\n    @allure.suite('Get advisor By ID')\n    @allure.epic('Advisor')\n    @allure.feature('Get advisor By ID')\n    @allure.story('Get advisor by Non-Existent ID')\n    @allure.tag('author: Jeyson')\n    @pytest.mark.functional\n    @pytest.mark.negative\n    @pytest.mark.regression\n    @pytest.mark.xfail(reason=\"This test case is expected to fail due to known issue.\",condition=True)\n    def test_get_advisor_by_non_existent_id(get_headers):\n        non_existent_id = 99999\n        url = f\"{AdvisorEndpoints.get_advisor_by_id(non_existent_id)}\"\n        headers = Auth().auth_valid_credential(get_headers)\n        response = RealHomeRequest.get_with_url_headers(url, headers)\n    \n>       assert_status_code_not_found(response)\n\ntests/advisor/test_find_advisor_by_id.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\n\n    def assert_status_code_not_found(response):\n>       assert response.status_code == 404, f\"Expected status code 404 but got {response.status_code}. Error message: {extract_error_message(response)}\"\nE       AssertionError: Expected status code 404 but got 500. Error message: El asesor con ese Id no exite\n\ncore/assertions/status_code.py:8: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_headers","time":{"start":1729992266472,"stop":1729992266472,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"author: Jeyson"},{"name":"epic","value":"Advisor"},{"name":"suite","value":"Get advisor By ID"},{"name":"feature","value":"Get advisor By ID"},{"name":"story","value":"Get advisor by Non-Existent ID"},{"name":"tag","value":"@pytest.mark.xfail(reason='This test case is expected to fail due to known issue.', condition=True)"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.advisor"},{"name":"host","value":"fv-az1393-92"},{"name":"thread","value":"2091-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.advisor.test_find_advisor_by_id"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["negative","functional","regression","author: Jeyson","@pytest.mark.xfail(reason='This test case is expected to fail due to known issue.', condition=True)"]},"source":"4638b667899e1917.json","parameterValues":[]}