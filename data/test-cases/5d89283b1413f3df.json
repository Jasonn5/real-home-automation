{"uid":"5d89283b1413f3df","name":"test_get_advisor_by_negative_id","fullName":"tests.advisor.test_find_advisor_by_id#test_get_advisor_by_negative_id","historyId":"627e4e687cf67933f02047cba8ec86b6","time":{"start":1726284199498,"stop":1726284201215,"duration":1717},"status":"failed","statusMessage":"AssertionError: Expected status code 400 but got 500. Error message: El asesor con ese Id no exite","statusTrace":"get_headers = <function get_headers.<locals>._get_headers at 0x7fb3b122f880>\n\n    @allure.suite('Get advisor By ID')\n    @allure.epic('Advisor')\n    @allure.feature('Get advisor By ID')\n    @allure.story('Get advisor by Negative ID')\n    @allure.tag('author: Jeyson')\n    @pytest.mark.functional\n    @pytest.mark.negative\n    @pytest.mark.regression\n    def test_get_advisor_by_negative_id(get_headers):\n        negative_id = -1\n        url = f\"{AdvisorEndpoints.get_advisor_by_id(negative_id)}\"\n        headers = Auth().auth_valid_credential(get_headers)\n        response = RealHomeRequest.get_with_url_headers(url, headers)\n    \n>       assert_status_code_bad_request(response)\n\ntests/advisor/test_find_advisor_by_id.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\n\n    def assert_status_code_bad_request(response):\n>       assert response.status_code == 400, f\"Expected status code 400 but got {response.status_code}. Error message: {extract_error_message(response)}\"\nE       AssertionError: Expected status code 400 but got 500. Error message: El asesor con ese Id no exite\n\ncore/assertions/status_code.py:20: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_headers","time":{"start":1726284199497,"stop":1726284199497,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"suite","value":"Get advisor By ID"},{"name":"story","value":"Get advisor by Negative ID"},{"name":"feature","value":"Get advisor By ID"},{"name":"tag","value":"author: Jeyson"},{"name":"epic","value":"Advisor"},{"name":"tag","value":"regression"},{"name":"tag","value":"negative"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.advisor"},{"name":"host","value":"fv-az1205-438"},{"name":"thread","value":"2100-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.advisor.test_find_advisor_by_id"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["negative","functional","regression","author: Jeyson"]},"source":"5d89283b1413f3df.json","parameterValues":[]}